from __future__ import division
import numpy as np
import numpy.linalg as la
from scipy.io import loadmat
import matplotlib.pyplot as plt
from matplotlib import cm
import random


def calc_nearest(test_data,train_data,train_labels):
    test=np.matrix(test_data,float)
    train=np.array(train_data,float)

    mult=np.multiply(train-test,train-test)
    sum=np.sum(mult,1)
    sqrt=np.sqrt(sum)
    min=np.argmin(sqrt)
    result=train_labels[min]
    return result

def nearest_neighbours(sample_size,test_data,train_data,train_labels):
    sel = random.sample(xrange(60000), sample_size)
    train=ocr['data'][sel].astype('float')
    labels=ocr['labels'][sel]
    result=np.apply_along_axis(calc_nearest,1,test_data,train,labels)
    return result

def calc_error_rate(result,testlabels):
    diff=res-testlabels
    errors=np.count_nonzero(diff)
    print errors
    error_rate=errors/len(testlabels)
    print error_rate
    return errors,error_rate

ocr=loadmat('ocr.mat')
train_data=ocr['data']
test=ocr['testdata']
sample_size=1000
res=nearest_neighbours(sample_size,test,ocr['data'],ocr['labels'])
errors,error_rate=calc_error_rate(res,ocr['testlabels'])


